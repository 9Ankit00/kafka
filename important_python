1.object() is shorthand for object.__call__()Definition and Usage

2.zip()
The zip() function returns a zip object, which is an iterator of tuples where the first item in each passed iterator is paired together, and then the second item in each passed iterator are paired together etc.

If the passed iterators have different lengths, the iterator with the least items decides the length of the new iterator.

Syntax
zip(iterator1, iterator2, iterator3 ...)
Parameter Values
Parameter	Description
iterator1, iterator2, iterator3 ...	Iterator objects that will be joined together


3. iloc()
The iloc() function in python is defined in the Pandas module that helps us to select a specific row or column from the data set.
Using the iloc method in python, we can easily retrieve any particular value from a row or column by using index values.
The syntax of iloc function in python is very simple: pandas.dataset.iloc[row, column]
The iloc function in python takes two optional parameters i.e. row number(s) and column number(s). We can only pass integer type values as parameter(s) in the iloc function in python.
Using the parameters provided, the iloc function in python returns a data set or series.
If we specify only row value, then the iloc function returns a Pandas Series. If we specify row value and column value, then the iloc function returns all the content of the specified cell. If we specify a list of values, the python iloc function returns a Pandas DataFrame.

Example:
import pandas

# reading the data from the data.csv file
employee_data = pandas.read_csv("data.csv")

# printing the data as output
print(data.iloc[1:3])


4. JSONSerializer
   def __init__(self, schema_str, schema_registry_client, to_dict=None, conf=None)
# object() is shorthand for object.__call__()Definition and Usage
  def __call__(self, obj, ctx):
        """
        Serializes an object to JSON, prepending it with Confluent Schema Registry
        framing.
        Args:
            obj (object): The object instance to serialize.
            ctx (SerializationContext): Metadata relevant to the serialization
                operation.
        Raises:
            SerializerError if any error occurs serializing obj.
        Returns:
            bytes: None if obj is None, else a byte array containing the JSON
            serialized data with Confluent Schema Registry framing.
        """
